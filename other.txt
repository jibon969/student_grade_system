
   # Enrolment Contract
    path('enrolment-contract/', enrolment_contract, name="enrolment-contract"),
    path('add-enrolment-contract/', add_enrolment_contract, name="add-enrolment-contract"),
    path('update-enrolment-contract/<int:id>/', update_enrolment_contract, name="update-enrolment-contract"),
    path('delete-enrolment-contract/<int:id>/', delete_enrolment_contract, name="delete-enrolment-contract"),
    path('download-enrolment-contract-csv/', download_enrolment_contract_csv, name="download-enrolment-contract-csv"),



"""
    EnrolmentContract
"""


@minified_response
def enrolment_contract(request):
    posts_list = EnrolmentContract.objects.all()
    query = request.GET.get('q')
    if query:
        # Using strip method to remove extra white space
        query = query.strip()
        posts_list = Program.objects.filter(
            Q(employer_name__icontains=query) |
            Q(employer_contact_info__icontains=query)|
            Q(notes__icontains=query)
        ).distinct()
    paginator = Paginator(posts_list, 10)  # 5 posts per page
    page = request.GET.get('page')

    try:
        posts = paginator.page(page)
    except PageNotAnInteger:
        posts = paginator.page(1)
    except EmptyPage:
        posts = paginator.page(paginator.num_pages)

    context = {
        'posts': posts,
        'page': page
    }
    return render(request, "home/enrolment-contract/enrolment-contract.html", context)


@minified_response
def add_enrolment_contract(request):
    if request.method == "POST":
        form = EnrolmentContractModelForm(request.POST or None, request.FILES or None)
        if form.is_valid():
            form.save()
            messages.add_message(request, messages.INFO, 'Successfully Added EnrolmentContract')
            return redirect('enrolment-contract')
        else:
            messages.add_message(request, messages.warning, 'Please valid information')
            return redirect('add-enrolment-contract')
    else:
        form = EnrolmentContractModelForm()
    context = {
        'form': form,
    }
    return render(request, 'home/enrolment-contract/add-enrolment-contract.html', context)


@minified_response
def update_enrolment_contract(request, id):
    page = request.GET.get('page')
    obj = get_object_or_404(EnrolmentContract, pk=id)
    form = ProgramModelForm(request.POST or None, request.FILES or None, instance=obj)
    if form.is_valid():
        form.save()
        messages.add_message(request, messages.INFO, 'Successfully Update EnrolmentContract')
        url = reverse_lazy('enrolment-contract') + "?page=" + page
        return redirect(url)
    return render(request, 'home/enrolment-contract/update-enrolment-contract.html', {'form': form})


@minified_response
def delete_enrolment_contract(request, id):
    """
    This function work delete single item form Program list
    :param request:
    :param id:
    :return:
    """
    obj = get_object_or_404(EnrolmentContract, pk=id)
    context = {
        'obj': obj
    }
    if request.method == "POST":
        obj.delete()
        messages.add_message(request, messages.WARNING, 'Successfully Delete EnrolmentContract')
        return redirect("enrolment-contract")
    return render(request, "home/enrolment-contract/delete-enrolment-contract.html", context)


@minified_response
def download_enrolment_contract_csv(request):
    queryset = EnrolmentContract.objects.all()
    response = HttpResponse(content_type="text/csv")
    writer = csv.writer(response)
    writer.writerow([
        'ID', 'Start Date', 'End Date', 'Actual End', 'Grad Code', 'Jp Code',
        'Employer Name', 'Employer Contact Info', 'Notes'
    ])
    for q in queryset:
        row = []
        row.extend([
            q.id, q.start_date, q.end_date, q.actual_end, q.grad_code, q.jp_code,
            q.employer_name, q.employer_contact_info, q.notes
        ])
        writer.writerow(row[:])
    response['Content-Disposition'] = 'attachment; filename="enrolment-contract.csv"'
    return response